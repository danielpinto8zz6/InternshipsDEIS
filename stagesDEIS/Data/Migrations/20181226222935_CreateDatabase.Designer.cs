// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stagesDEIS.Data;

namespace stagesDEIS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181226222935_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("stagesDEIS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Roles");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("stagesDEIS.Models.Company", b =>
                {
                    b.Property<string>("CompanyId");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("stagesDEIS.Models.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Pontuation");

                    b.Property<string>("StudentId");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("GradeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("stagesDEIS.Models.Professor", b =>
                {
                    b.Property<string>("ProfessorId");

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ProjectId");

                    b.HasKey("ProfessorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("stagesDEIS.Models.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessConditions")
                        .IsRequired();

                    b.Property<int>("Branch");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Objectives")
                        .IsRequired();

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("stagesDEIS.Models.ProjectCandidature", b =>
                {
                    b.Property<string>("ProjectCandidatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Branch");

                    b.Property<string>("CandidateId");

                    b.Property<string>("Grades")
                        .IsRequired();

                    b.Property<string>("ProjectId");

                    b.Property<int>("Result");

                    b.Property<string>("UnfinishedGrades")
                        .IsRequired();

                    b.HasKey("ProjectCandidatureId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCandidature");
                });

            modelBuilder.Entity("stagesDEIS.Models.Stage", b =>
                {
                    b.Property<string>("StageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessConditions")
                        .IsRequired();

                    b.Property<string>("AdvisorId");

                    b.Property<int>("Branch");

                    b.Property<string>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("Objectives")
                        .IsRequired();

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("StageId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("stagesDEIS.Models.StageCandidature", b =>
                {
                    b.Property<string>("StageCandidatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Branch");

                    b.Property<string>("CandidateId");

                    b.Property<string>("Grades")
                        .IsRequired();

                    b.Property<int>("Result");

                    b.Property<string>("StageId");

                    b.Property<string>("UnfinishedGrades")
                        .IsRequired();

                    b.HasKey("StageCandidatureId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("StageId");

                    b.ToTable("StageCandidature");
                });

            modelBuilder.Entity("stagesDEIS.Models.Student", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<int>("Branch");

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UnfinishedGrades")
                        .IsRequired();

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("stagesDEIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("stagesDEIS.Models.Company", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser", "User")
                        .WithOne("Company")
                        .HasForeignKey("stagesDEIS.Models.Company", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("stagesDEIS.Models.Grade", b =>
                {
                    b.HasOne("stagesDEIS.Models.Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("stagesDEIS.Models.Professor", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser", "User")
                        .WithOne("Professor")
                        .HasForeignKey("stagesDEIS.Models.Professor", "ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("stagesDEIS.Models.Project")
                        .WithMany("Professors")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("stagesDEIS.Models.ProjectCandidature", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("stagesDEIS.Models.Project", "Project")
                        .WithMany("Candidatures")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("stagesDEIS.Models.Stage", b =>
                {
                    b.HasOne("stagesDEIS.Models.Professor", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId");

                    b.HasOne("stagesDEIS.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("stagesDEIS.Models.StageCandidature", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("stagesDEIS.Models.Stage", "Stage")
                        .WithMany("Candidatures")
                        .HasForeignKey("StageId");
                });

            modelBuilder.Entity("stagesDEIS.Models.Student", b =>
                {
                    b.HasOne("stagesDEIS.Models.ApplicationUser", "User")
                        .WithOne("Student")
                        .HasForeignKey("stagesDEIS.Models.Student", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
